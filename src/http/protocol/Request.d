
#line 1 "src/http/protocol/Request.d.rl"
module http.protocol.Request;

import std.string;

import dlog.Logger;

import http.protocol.Message;
import http.protocol.Protocol;
import http.protocol.Method;
import http.protocol.Header;


#line 16 "src/http/protocol/Request.d"
enum byte[] _http_parser_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 7, 1, 
	8, 1, 10, 1, 11, 1, 14, 2, 
	0, 7, 2, 0, 11, 2, 1, 14, 
	2, 4, 3, 2, 6, 9, 2, 11, 
	9, 2, 12, 14, 2, 13, 14, 3, 
	0, 11, 9, 3, 5, 6, 9
];

enum short[] _http_parser_key_offsets = [
	0, 0, 6, 11, 28, 29, 30, 31, 
	32, 33, 34, 35, 37, 39, 60, 80, 
	86, 90, 91, 112, 128, 140, 152, 158, 
	164, 170, 176, 190, 196, 202, 215, 228, 
	234, 240, 255, 273, 290, 296, 302, 322, 
	336, 342, 348, 365, 381, 387, 393, 399, 
	408, 414, 421, 428, 435, 436, 444, 452, 
	456, 457, 461, 462, 466, 467, 472, 475, 
	478, 481, 483, 484, 487, 490, 493, 495, 
	496, 499, 502, 505, 507, 508, 515, 522, 
	523, 529, 536, 543, 550, 558, 566, 574, 
	584, 591, 599, 606, 613, 620, 627, 628, 
	635, 642, 649, 656, 657, 664, 671, 678, 
	685, 686, 693, 700, 707, 714, 715, 722, 
	729, 736, 743, 744, 751, 758, 765, 772, 
	773, 780, 787, 794, 801, 802, 809, 820, 
	829, 837, 845, 847, 855, 864, 872, 880, 
	882, 891, 900, 909, 920, 928, 937, 945, 
	954, 963, 972, 983, 991, 1000, 1008, 1018, 
	1028, 1036, 1043, 1050, 1051, 1059, 1067, 1075, 
	1085, 1092, 1100, 1107, 1115, 1117, 1118, 1119, 
	1120, 1131, 1137, 1144, 1157, 1171, 1192, 1207, 
	1212, 1217, 1222, 1227, 1232, 1237, 1242, 1247, 
	1252, 1257, 1262, 1267, 1272, 1277, 1282, 1287, 
	1292, 1297, 1298, 1306, 1317, 1318, 1320, 1334, 
	1335, 1336, 1338, 1352, 1358, 1364, 1376, 1382, 
	1388, 1401, 1417, 1432, 1438, 1444, 1462, 1476, 
	1482, 1488, 1503, 1517, 1523, 1529, 1533, 1542, 
	1548, 1555, 1562, 1569, 1570, 1578, 1586, 1590, 
	1591, 1595, 1596, 1600, 1601, 1604, 1607, 1610, 
	1613, 1615, 1616, 1619, 1622, 1625, 1627, 1628, 
	1631, 1634, 1637, 1639, 1640, 1647, 1654, 1655, 
	1661, 1668, 1675, 1682, 1690, 1698, 1706, 1716, 
	1723, 1731, 1738, 1745, 1752, 1759, 1760, 1767, 
	1774, 1781, 1788, 1789, 1796, 1803, 1810, 1817, 
	1818, 1825, 1832, 1839, 1846, 1847, 1854, 1861, 
	1868, 1875, 1876, 1883, 1890, 1897, 1904, 1905, 
	1912, 1919, 1926, 1933, 1934, 1941, 1952, 1961, 
	1969, 1977, 1979, 1987, 1996, 2004, 2012, 2014, 
	2023, 2032, 2041, 2052, 2060, 2069, 2077, 2086, 
	2095, 2104, 2115, 2123, 2132, 2140, 2150, 2160, 
	2168, 2175, 2182, 2183, 2191, 2199, 2207, 2217, 
	2224, 2232, 2239, 2247, 2249, 2250, 2251, 2252, 
	2263, 2269, 2276, 2289, 2303, 2323
];

enum char[] _http_parser_trans_keys = [
	60u, 64u, 48u, 57u, 65u, 90u, 32u, 48u, 
	57u, 65u, 90u, 32u, 33u, 35u, 37u, 47u, 
	59u, 61u, 63u, 64u, 95u, 126u, 36u, 57u, 
	65u, 90u, 97u, 122u, 72u, 84u, 84u, 80u, 
	47u, 49u, 46u, 48u, 49u, 10u, 13u, 10u, 
	13u, 33u, 124u, 126u, 1u, 8u, 11u, 31u, 
	35u, 39u, 42u, 43u, 45u, 46u, 48u, 57u, 
	65u, 90u, 94u, 122u, 33u, 58u, 124u, 126u, 
	1u, 8u, 10u, 31u, 35u, 39u, 42u, 43u, 
	45u, 46u, 48u, 57u, 65u, 90u, 94u, 122u, 
	0u, 9u, 10u, 13u, 32u, 127u, 0u, 10u, 
	13u, 127u, 10u, 10u, 33u, 58u, 124u, 126u, 
	1u, 8u, 11u, 31u, 35u, 39u, 42u, 43u, 
	45u, 46u, 48u, 57u, 65u, 90u, 94u, 122u, 
	32u, 33u, 35u, 37u, 47u, 59u, 61u, 63u, 
	95u, 126u, 36u, 57u, 64u, 90u, 97u, 122u, 
	32u, 33u, 37u, 61u, 95u, 126u, 36u, 59u, 
	63u, 90u, 97u, 122u, 32u, 33u, 37u, 61u, 
	95u, 126u, 36u, 59u, 63u, 90u, 97u, 122u, 
	48u, 57u, 65u, 70u, 97u, 102u, 48u, 57u, 
	65u, 70u, 97u, 102u, 48u, 57u, 65u, 70u, 
	97u, 102u, 48u, 57u, 65u, 70u, 97u, 102u, 
	32u, 33u, 35u, 37u, 61u, 63u, 95u, 126u, 
	36u, 59u, 64u, 90u, 97u, 122u, 48u, 57u, 
	65u, 70u, 97u, 102u, 48u, 57u, 65u, 70u, 
	97u, 102u, 32u, 33u, 35u, 37u, 61u, 95u, 
	126u, 36u, 59u, 63u, 90u, 97u, 122u, 32u, 
	33u, 35u, 37u, 61u, 95u, 126u, 36u, 59u, 
	63u, 90u, 97u, 122u, 48u, 57u, 65u, 70u, 
	97u, 102u, 48u, 57u, 65u, 70u, 97u, 102u, 
	32u, 33u, 35u, 37u, 47u, 61u, 63u, 95u, 
	126u, 36u, 59u, 64u, 90u, 97u, 122u, 32u, 
	33u, 35u, 37u, 47u, 58u, 61u, 63u, 64u, 
	91u, 95u, 126u, 36u, 59u, 65u, 90u, 97u, 
	122u, 32u, 33u, 35u, 37u, 47u, 58u, 61u, 
	63u, 64u, 95u, 126u, 36u, 59u, 65u, 90u, 
	97u, 122u, 48u, 57u, 65u, 70u, 97u, 102u, 
	48u, 57u, 65u, 70u, 97u, 102u, 32u, 33u, 
	35u, 37u, 47u, 61u, 63u, 64u, 95u, 126u, 
	36u, 46u, 48u, 57u, 58u, 59u, 65u, 90u, 
	97u, 122u, 33u, 37u, 61u, 64u, 95u, 126u, 
	36u, 46u, 48u, 59u, 65u, 90u, 97u, 122u, 
	48u, 57u, 65u, 70u, 97u, 102u, 48u, 57u, 
	65u, 70u, 97u, 102u, 32u, 33u, 35u, 37u, 
	47u, 58u, 61u, 63u, 91u, 95u, 126u, 36u, 
	59u, 65u, 90u, 97u, 122u, 32u, 33u, 35u, 
	37u, 47u, 58u, 61u, 63u, 95u, 126u, 36u, 
	59u, 65u, 90u, 97u, 122u, 48u, 57u, 65u, 
	70u, 97u, 102u, 48u, 57u, 65u, 70u, 97u, 
	102u, 32u, 35u, 47u, 63u, 48u, 57u, 6u, 
	58u, 118u, 48u, 57u, 65u, 70u, 97u, 102u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 49u, 50u, 48u, 57u, 
	65u, 70u, 97u, 102u, 46u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 49u, 50u, 48u, 57u, 
	46u, 49u, 50u, 48u, 57u, 46u, 49u, 50u, 
	48u, 57u, 93u, 32u, 35u, 47u, 58u, 63u, 
	93u, 48u, 57u, 93u, 48u, 57u, 48u, 53u, 
	93u, 48u, 57u, 48u, 46u, 48u, 57u, 46u, 
	48u, 57u, 46u, 48u, 53u, 48u, 57u, 48u, 
	46u, 48u, 57u, 46u, 48u, 57u, 46u, 48u, 
	53u, 48u, 57u, 48u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 93u, 48u, 57u, 65u, 70u, 97u, 102u, 
	93u, 48u, 57u, 65u, 70u, 97u, 102u, 93u, 
	48u, 57u, 65u, 70u, 97u, 102u, 46u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 46u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 46u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 46u, 48u, 
	53u, 58u, 49u, 57u, 65u, 70u, 97u, 102u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 48u, 
	58u, 49u, 57u, 65u, 70u, 97u, 102u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 58u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 58u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 49u, 50u, 93u, 2u, 3u, 48u, 57u, 
	65u, 70u, 97u, 102u, 46u, 58u, 93u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 93u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 93u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 93u, 49u, 
	50u, 48u, 57u, 65u, 70u, 97u, 102u, 46u, 
	58u, 93u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 93u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 93u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 93u, 46u, 58u, 93u, 48u, 57u, 65u, 
	70u, 97u, 102u, 46u, 58u, 93u, 48u, 57u, 
	65u, 70u, 97u, 102u, 46u, 58u, 93u, 48u, 
	57u, 65u, 70u, 97u, 102u, 46u, 48u, 53u, 
	58u, 93u, 49u, 57u, 65u, 70u, 97u, 102u, 
	58u, 93u, 48u, 57u, 65u, 70u, 97u, 102u, 
	48u, 58u, 93u, 49u, 57u, 65u, 70u, 97u, 
	102u, 58u, 93u, 48u, 57u, 65u, 70u, 97u, 
	102u, 46u, 58u, 93u, 48u, 57u, 65u, 70u, 
	97u, 102u, 46u, 58u, 93u, 48u, 57u, 65u, 
	70u, 97u, 102u, 46u, 58u, 93u, 48u, 57u, 
	65u, 70u, 97u, 102u, 46u, 48u, 53u, 58u, 
	93u, 49u, 57u, 65u, 70u, 97u, 102u, 58u, 
	93u, 48u, 57u, 65u, 70u, 97u, 102u, 48u, 
	58u, 93u, 49u, 57u, 65u, 70u, 97u, 102u, 
	58u, 93u, 48u, 57u, 65u, 70u, 97u, 102u, 
	49u, 50u, 2u, 3u, 48u, 57u, 65u, 70u, 
	97u, 102u, 49u, 50u, 2u, 3u, 48u, 57u, 
	65u, 70u, 97u, 102u, 46u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 46u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 46u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 46u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 46u, 48u, 53u, 58u, 49u, 
	57u, 65u, 70u, 97u, 102u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 48u, 58u, 49u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 2u, 3u, 48u, 57u, 65u, 
	70u, 97u, 102u, 2u, 3u, 3u, 4u, 58u, 
	49u, 50u, 93u, 2u, 5u, 48u, 57u, 65u, 
	70u, 97u, 102u, 48u, 57u, 65u, 70u, 97u, 
	102u, 46u, 48u, 57u, 65u, 70u, 97u, 102u, 
	33u, 36u, 61u, 95u, 126u, 38u, 46u, 48u, 
	59u, 65u, 90u, 97u, 122u, 33u, 36u, 61u, 
	93u, 95u, 126u, 38u, 46u, 48u, 59u, 65u, 
	90u, 97u, 122u, 32u, 33u, 35u, 37u, 43u, 
	47u, 58u, 59u, 61u, 63u, 64u, 95u, 126u, 
	36u, 44u, 45u, 57u, 65u, 90u, 97u, 122u, 
	32u, 33u, 35u, 37u, 47u, 61u, 63u, 95u, 
	126u, 36u, 59u, 64u, 90u, 97u, 122u, 32u, 
	48u, 57u, 65u, 90u, 32u, 48u, 57u, 65u, 
	90u, 32u, 48u, 57u, 65u, 90u, 32u, 48u, 
	57u, 65u, 90u, 32u, 48u, 57u, 65u, 90u, 
	32u, 48u, 57u, 65u, 90u, 32u, 48u, 57u, 
	65u, 90u, 32u, 48u, 57u, 65u, 90u, 32u, 
	48u, 57u, 65u, 90u, 32u, 48u, 57u, 65u, 
	90u, 32u, 48u, 57u, 65u, 90u, 32u, 48u, 
	57u, 65u, 90u, 32u, 48u, 57u, 65u, 90u, 
	32u, 48u, 57u, 65u, 90u, 32u, 48u, 57u, 
	65u, 90u, 32u, 48u, 57u, 65u, 90u, 32u, 
	48u, 57u, 65u, 90u, 32u, 48u, 57u, 65u, 
	90u, 32u, 45u, 46u, 48u, 57u, 65u, 90u, 
	97u, 122u, 32u, 47u, 62u, 9u, 13u, 45u, 
	57u, 65u, 90u, 97u, 122u, 62u, 0u, 62u, 
	32u, 33u, 37u, 47u, 59u, 61u, 95u, 126u, 
	36u, 57u, 64u, 90u, 97u, 122u, 123u, 125u, 
	0u, 125u, 32u, 33u, 37u, 47u, 59u, 61u, 
	95u, 126u, 36u, 57u, 64u, 90u, 97u, 122u, 
	48u, 57u, 65u, 70u, 97u, 102u, 48u, 57u, 
	65u, 70u, 97u, 102u, 32u, 33u, 37u, 61u, 
	95u, 126u, 36u, 59u, 64u, 90u, 97u, 122u, 
	48u, 57u, 65u, 70u, 97u, 102u, 48u, 57u, 
	65u, 70u, 97u, 102u, 32u, 33u, 37u, 47u, 
	61u, 95u, 126u, 36u, 59u, 64u, 90u, 97u, 
	122u, 32u, 33u, 37u, 47u, 58u, 61u, 64u, 
	91u, 95u, 126u, 36u, 59u, 65u, 90u, 97u, 
	122u, 32u, 33u, 37u, 47u, 58u, 61u, 64u, 
	95u, 126u, 36u, 59u, 65u, 90u, 97u, 122u, 
	48u, 57u, 65u, 70u, 97u, 102u, 48u, 57u, 
	65u, 70u, 97u, 102u, 32u, 33u, 37u, 47u, 
	61u, 64u, 95u, 126u, 36u, 46u, 48u, 57u, 
	58u, 59u, 65u, 90u, 97u, 122u, 33u, 37u, 
	61u, 64u, 95u, 126u, 36u, 46u, 48u, 59u, 
	65u, 90u, 97u, 122u, 48u, 57u, 65u, 70u, 
	97u, 102u, 48u, 57u, 65u, 70u, 97u, 102u, 
	32u, 33u, 37u, 47u, 58u, 61u, 91u, 95u, 
	126u, 36u, 59u, 65u, 90u, 97u, 122u, 32u, 
	33u, 37u, 47u, 58u, 61u, 95u, 126u, 36u, 
	59u, 65u, 90u, 97u, 122u, 48u, 57u, 65u, 
	70u, 97u, 102u, 48u, 57u, 65u, 70u, 97u, 
	102u, 32u, 47u, 48u, 57u, 6u, 58u, 118u, 
	48u, 57u, 65u, 70u, 97u, 102u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 49u, 50u, 48u, 57u, 65u, 70u, 
	97u, 102u, 46u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 49u, 50u, 48u, 57u, 46u, 49u, 
	50u, 48u, 57u, 46u, 49u, 50u, 48u, 57u, 
	93u, 32u, 47u, 58u, 93u, 48u, 57u, 93u, 
	48u, 57u, 48u, 53u, 93u, 48u, 57u, 48u, 
	46u, 48u, 57u, 46u, 48u, 57u, 46u, 48u, 
	53u, 48u, 57u, 48u, 46u, 48u, 57u, 46u, 
	48u, 57u, 46u, 48u, 53u, 48u, 57u, 48u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 93u, 48u, 57u, 
	65u, 70u, 97u, 102u, 93u, 48u, 57u, 65u, 
	70u, 97u, 102u, 93u, 48u, 57u, 65u, 70u, 
	97u, 102u, 46u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 46u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 46u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 46u, 48u, 53u, 58u, 49u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 48u, 58u, 49u, 57u, 65u, 
	70u, 97u, 102u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 58u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 58u, 48u, 57u, 65u, 
	70u, 97u, 102u, 58u, 48u, 57u, 65u, 70u, 
	97u, 102u, 58u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 58u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 58u, 58u, 48u, 
	57u, 65u, 70u, 97u, 102u, 49u, 50u, 93u, 
	2u, 3u, 48u, 57u, 65u, 70u, 97u, 102u, 
	46u, 58u, 93u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 93u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 93u, 48u, 57u, 65u, 70u, 97u, 
	102u, 58u, 93u, 49u, 50u, 48u, 57u, 65u, 
	70u, 97u, 102u, 46u, 58u, 93u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 93u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 93u, 48u, 57u, 
	65u, 70u, 97u, 102u, 58u, 93u, 46u, 58u, 
	93u, 48u, 57u, 65u, 70u, 97u, 102u, 46u, 
	58u, 93u, 48u, 57u, 65u, 70u, 97u, 102u, 
	46u, 58u, 93u, 48u, 57u, 65u, 70u, 97u, 
	102u, 46u, 48u, 53u, 58u, 93u, 49u, 57u, 
	65u, 70u, 97u, 102u, 58u, 93u, 48u, 57u, 
	65u, 70u, 97u, 102u, 48u, 58u, 93u, 49u, 
	57u, 65u, 70u, 97u, 102u, 58u, 93u, 48u, 
	57u, 65u, 70u, 97u, 102u, 46u, 58u, 93u, 
	48u, 57u, 65u, 70u, 97u, 102u, 46u, 58u, 
	93u, 48u, 57u, 65u, 70u, 97u, 102u, 46u, 
	58u, 93u, 48u, 57u, 65u, 70u, 97u, 102u, 
	46u, 48u, 53u, 58u, 93u, 49u, 57u, 65u, 
	70u, 97u, 102u, 58u, 93u, 48u, 57u, 65u, 
	70u, 97u, 102u, 48u, 58u, 93u, 49u, 57u, 
	65u, 70u, 97u, 102u, 58u, 93u, 48u, 57u, 
	65u, 70u, 97u, 102u, 49u, 50u, 2u, 3u, 
	48u, 57u, 65u, 70u, 97u, 102u, 49u, 50u, 
	2u, 3u, 48u, 57u, 65u, 70u, 97u, 102u, 
	46u, 58u, 48u, 57u, 65u, 70u, 97u, 102u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 58u, 
	48u, 57u, 65u, 70u, 97u, 102u, 58u, 46u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 46u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 46u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 46u, 
	48u, 53u, 58u, 49u, 57u, 65u, 70u, 97u, 
	102u, 58u, 48u, 57u, 65u, 70u, 97u, 102u, 
	48u, 58u, 49u, 57u, 65u, 70u, 97u, 102u, 
	58u, 48u, 57u, 65u, 70u, 97u, 102u, 2u, 
	3u, 48u, 57u, 65u, 70u, 97u, 102u, 2u, 
	3u, 3u, 4u, 58u, 49u, 50u, 93u, 2u, 
	5u, 48u, 57u, 65u, 70u, 97u, 102u, 48u, 
	57u, 65u, 70u, 97u, 102u, 46u, 48u, 57u, 
	65u, 70u, 97u, 102u, 33u, 36u, 61u, 95u, 
	126u, 38u, 46u, 48u, 59u, 65u, 90u, 97u, 
	122u, 33u, 36u, 61u, 93u, 95u, 126u, 38u, 
	46u, 48u, 59u, 65u, 90u, 97u, 122u, 33u, 
	58u, 124u, 126u, 1u, 8u, 10u, 31u, 35u, 
	39u, 42u, 43u, 45u, 46u, 48u, 57u, 65u, 
	90u, 94u, 122u, 0
];

enum byte[] _http_parser_single_lengths = [
	0, 2, 1, 11, 1, 1, 1, 1, 
	1, 1, 1, 0, 2, 5, 4, 6, 
	4, 1, 5, 10, 6, 6, 0, 0, 
	0, 0, 8, 0, 0, 7, 7, 0, 
	0, 9, 12, 11, 0, 0, 10, 6, 
	0, 0, 11, 10, 0, 0, 4, 3, 
	0, 1, 1, 1, 1, 2, 2, 2, 
	1, 2, 1, 2, 1, 5, 1, 1, 
	3, 0, 1, 1, 1, 3, 0, 1, 
	1, 1, 3, 0, 1, 1, 1, 1, 
	0, 1, 1, 1, 2, 2, 2, 4, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 3, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	3, 3, 3, 5, 2, 3, 2, 3, 
	3, 3, 5, 2, 3, 2, 2, 2, 
	2, 1, 1, 1, 2, 2, 2, 4, 
	1, 2, 1, 0, 0, 1, 1, 1, 
	3, 0, 1, 5, 6, 13, 9, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 3, 1, 2, 8, 1, 
	1, 2, 8, 0, 0, 6, 0, 0, 
	7, 10, 9, 0, 0, 8, 6, 0, 
	0, 9, 8, 0, 0, 2, 3, 0, 
	1, 1, 1, 1, 2, 2, 2, 1, 
	2, 1, 2, 1, 3, 1, 1, 3, 
	0, 1, 1, 1, 3, 0, 1, 1, 
	1, 3, 0, 1, 1, 1, 1, 0, 
	1, 1, 1, 2, 2, 2, 4, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 3, 2, 
	2, 2, 2, 3, 2, 2, 2, 3, 
	3, 3, 5, 2, 3, 2, 3, 3, 
	3, 5, 2, 3, 2, 2, 2, 2, 
	1, 1, 1, 2, 2, 2, 4, 1, 
	2, 1, 0, 0, 1, 1, 1, 3, 
	0, 1, 5, 6, 4, 0
];

enum byte[] _http_parser_range_lengths = [
	0, 2, 2, 3, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 8, 8, 0, 
	0, 0, 8, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 5, 4, 
	3, 3, 3, 3, 3, 3, 1, 3, 
	3, 3, 3, 3, 0, 3, 3, 1, 
	0, 1, 0, 1, 0, 0, 1, 1, 
	0, 1, 0, 1, 1, 0, 1, 0, 
	1, 1, 0, 1, 0, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 0, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 0, 3, 3, 
	3, 3, 0, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 0, 3, 4, 3, 
	3, 3, 0, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 4, 4, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 4, 1, 0, 0, 0, 
	4, 3, 3, 4, 4, 4, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 0, 4, 4, 0, 0, 3, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 5, 4, 3, 
	3, 3, 3, 3, 3, 1, 3, 3, 
	3, 3, 3, 0, 3, 3, 1, 0, 
	1, 0, 1, 0, 0, 1, 1, 0, 
	1, 0, 1, 1, 0, 1, 0, 1, 
	1, 0, 1, 0, 3, 3, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 3, 3, 
	3, 3, 0, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 0, 3, 3, 3, 3, 0, 3, 
	3, 3, 3, 0, 3, 4, 3, 3, 
	3, 0, 3, 3, 3, 3, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 4, 4, 3, 
	3, 3, 0, 3, 3, 3, 3, 3, 
	3, 3, 4, 1, 0, 0, 0, 4, 
	3, 3, 4, 4, 8, 0
];

enum short[] _http_parser_index_offsets = [
	0, 0, 5, 9, 24, 26, 28, 30, 
	32, 34, 36, 38, 40, 43, 57, 70, 
	77, 82, 84, 98, 112, 122, 132, 136, 
	140, 144, 148, 160, 164, 168, 179, 190, 
	194, 198, 211, 227, 242, 246, 250, 266, 
	277, 281, 285, 300, 314, 318, 322, 328, 
	335, 339, 344, 349, 354, 356, 362, 368, 
	372, 374, 378, 380, 384, 386, 392, 395, 
	398, 402, 404, 406, 409, 412, 416, 418, 
	420, 423, 426, 430, 432, 434, 439, 444, 
	446, 450, 455, 460, 465, 471, 477, 483, 
	491, 496, 502, 507, 512, 517, 522, 524, 
	529, 534, 539, 544, 546, 551, 556, 561, 
	566, 568, 573, 578, 583, 588, 590, 595, 
	600, 605, 610, 612, 617, 622, 627, 632, 
	634, 639, 644, 649, 654, 656, 661, 669, 
	676, 682, 688, 691, 697, 704, 710, 716, 
	719, 726, 733, 740, 749, 755, 762, 768, 
	775, 782, 789, 798, 804, 811, 817, 824, 
	831, 837, 842, 847, 849, 855, 861, 867, 
	875, 880, 886, 891, 896, 898, 900, 902, 
	904, 912, 916, 921, 931, 942, 960, 973, 
	977, 981, 985, 989, 993, 997, 1001, 1005, 
	1009, 1013, 1017, 1021, 1025, 1029, 1033, 1037, 
	1041, 1045, 1047, 1052, 1060, 1062, 1065, 1077, 
	1079, 1081, 1084, 1096, 1100, 1104, 1114, 1118, 
	1122, 1133, 1147, 1160, 1164, 1168, 1182, 1193, 
	1197, 1201, 1214, 1226, 1230, 1234, 1238, 1245, 
	1249, 1254, 1259, 1264, 1266, 1272, 1278, 1282, 
	1284, 1288, 1290, 1294, 1296, 1300, 1303, 1306, 
	1310, 1312, 1314, 1317, 1320, 1324, 1326, 1328, 
	1331, 1334, 1338, 1340, 1342, 1347, 1352, 1354, 
	1358, 1363, 1368, 1373, 1379, 1385, 1391, 1399, 
	1404, 1410, 1415, 1420, 1425, 1430, 1432, 1437, 
	1442, 1447, 1452, 1454, 1459, 1464, 1469, 1474, 
	1476, 1481, 1486, 1491, 1496, 1498, 1503, 1508, 
	1513, 1518, 1520, 1525, 1530, 1535, 1540, 1542, 
	1547, 1552, 1557, 1562, 1564, 1569, 1577, 1584, 
	1590, 1596, 1599, 1605, 1612, 1618, 1624, 1627, 
	1634, 1641, 1648, 1657, 1663, 1670, 1676, 1683, 
	1690, 1697, 1706, 1712, 1719, 1725, 1732, 1739, 
	1745, 1750, 1755, 1757, 1763, 1769, 1775, 1783, 
	1788, 1794, 1799, 1804, 1806, 1808, 1810, 1812, 
	1820, 1824, 1829, 1839, 1850, 1863
];

enum short[] _http_parser_indicies = [
	2, 3, 0, 0, 1, 4, 5, 5, 
	1, 6, 7, 8, 9, 10, 7, 7, 
	11, 7, 7, 7, 7, 12, 12, 1, 
	13, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 22, 1, 24, 25, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	1, 26, 27, 26, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 1, 1, 29, 
	30, 31, 29, 1, 28, 1, 33, 34, 
	1, 32, 35, 1, 36, 26, 27, 26, 
	26, 26, 26, 26, 26, 26, 26, 26, 
	26, 1, 37, 38, 39, 40, 41, 38, 
	38, 42, 38, 38, 38, 38, 38, 1, 
	43, 44, 45, 44, 44, 44, 44, 44, 
	44, 1, 46, 47, 48, 47, 47, 47, 
	47, 47, 47, 1, 49, 49, 49, 1, 
	47, 47, 47, 1, 50, 50, 50, 1, 
	38, 38, 38, 1, 37, 41, 39, 51, 
	41, 42, 41, 41, 41, 41, 41, 1, 
	52, 52, 52, 1, 41, 41, 41, 1, 
	53, 54, 55, 56, 54, 54, 54, 54, 
	54, 54, 1, 57, 58, 59, 60, 58, 
	58, 58, 58, 58, 58, 1, 61, 61, 
	61, 1, 58, 58, 58, 1, 37, 41, 
	39, 51, 62, 41, 42, 41, 41, 41, 
	41, 41, 1, 37, 63, 39, 64, 41, 
	65, 63, 42, 66, 67, 63, 63, 63, 
	63, 63, 1, 37, 63, 39, 64, 41, 
	65, 63, 42, 66, 63, 63, 63, 63, 
	63, 1, 68, 68, 68, 1, 63, 63, 
	63, 1, 37, 69, 39, 70, 41, 69, 
	42, 66, 69, 69, 69, 65, 69, 69, 
	69, 1, 69, 70, 69, 66, 69, 69, 
	69, 69, 69, 69, 1, 71, 71, 71, 
	1, 69, 69, 69, 1, 37, 72, 39, 
	73, 41, 74, 72, 42, 67, 72, 72, 
	72, 72, 72, 1, 37, 72, 39, 73, 
	41, 74, 72, 42, 72, 72, 72, 72, 
	72, 1, 75, 75, 75, 1, 72, 72, 
	72, 1, 37, 39, 41, 42, 74, 1, 
	76, 78, 79, 77, 77, 77, 1, 80, 
	80, 80, 1, 82, 81, 81, 81, 1, 
	82, 83, 83, 83, 1, 82, 84, 84, 
	84, 1, 82, 1, 86, 87, 85, 88, 
	88, 1, 89, 91, 90, 90, 90, 1, 
	93, 94, 92, 1, 95, 1, 97, 98, 
	96, 1, 99, 1, 101, 102, 100, 1, 
	103, 1, 37, 39, 41, 74, 42, 1, 
	103, 104, 1, 103, 100, 1, 105, 106, 
	103, 1, 100, 1, 100, 1, 99, 107, 
	1, 99, 96, 1, 99, 108, 109, 1, 
	96, 1, 96, 1, 95, 110, 1, 95, 
	92, 1, 95, 111, 112, 1, 92, 1, 
	92, 1, 91, 113, 113, 113, 1, 91, 
	114, 114, 114, 1, 91, 1, 115, 115, 
	115, 1, 103, 116, 116, 116, 1, 103, 
	117, 117, 117, 1, 103, 100, 100, 100, 
	1, 89, 91, 118, 90, 90, 1, 89, 
	91, 119, 113, 113, 1, 89, 91, 114, 
	114, 114, 1, 89, 120, 121, 91, 90, 
	90, 90, 1, 91, 119, 113, 113, 1, 
	119, 91, 113, 113, 113, 1, 91, 90, 
	90, 90, 1, 123, 122, 122, 122, 1, 
	123, 124, 124, 124, 1, 123, 125, 125, 
	125, 1, 123, 1, 127, 126, 126, 126, 
	1, 129, 128, 128, 128, 1, 129, 130, 
	130, 130, 1, 129, 131, 131, 131, 1, 
	129, 1, 133, 132, 132, 132, 1, 135, 
	134, 134, 134, 1, 135, 136, 136, 136, 
	1, 135, 137, 137, 137, 1, 135, 1, 
	139, 138, 138, 138, 1, 141, 140, 140, 
	140, 1, 141, 142, 142, 142, 1, 141, 
	143, 143, 143, 1, 141, 1, 145, 144, 
	144, 144, 1, 147, 146, 146, 146, 1, 
	147, 148, 148, 148, 1, 147, 149, 149, 
	149, 1, 147, 1, 151, 150, 150, 150, 
	1, 153, 152, 152, 152, 1, 153, 154, 
	154, 154, 1, 153, 155, 155, 155, 1, 
	153, 1, 157, 156, 156, 156, 1, 159, 
	158, 158, 158, 1, 159, 160, 160, 160, 
	1, 159, 161, 161, 161, 1, 159, 1, 
	162, 156, 156, 156, 1, 164, 165, 103, 
	76, 163, 166, 166, 1, 89, 168, 103, 
	167, 167, 167, 1, 168, 103, 169, 169, 
	169, 1, 168, 103, 170, 170, 170, 1, 
	168, 103, 1, 172, 173, 171, 174, 174, 
	1, 89, 91, 103, 175, 175, 175, 1, 
	91, 103, 176, 176, 176, 1, 91, 103, 
	177, 177, 177, 1, 91, 103, 1, 89, 
	91, 103, 178, 175, 175, 1, 89, 91, 
	103, 179, 176, 176, 1, 89, 91, 103, 
	177, 177, 177, 1, 89, 180, 181, 91, 
	103, 175, 175, 175, 1, 91, 103, 179, 
	176, 176, 1, 179, 91, 103, 176, 176, 
	176, 1, 91, 103, 175, 175, 175, 1, 
	89, 168, 103, 182, 167, 167, 1, 89, 
	168, 103, 183, 169, 169, 1, 89, 168, 
	103, 170, 170, 170, 1, 89, 184, 185, 
	168, 103, 167, 167, 167, 1, 168, 103, 
	183, 169, 169, 1, 183, 168, 103, 169, 
	169, 169, 1, 168, 103, 167, 167, 167, 
	1, 164, 165, 76, 163, 166, 166, 1, 
	187, 188, 76, 186, 189, 189, 1, 89, 
	168, 190, 190, 190, 1, 168, 191, 191, 
	191, 1, 168, 192, 192, 192, 1, 168, 
	1, 89, 168, 193, 190, 190, 1, 89, 
	168, 194, 191, 191, 1, 89, 168, 192, 
	192, 192, 1, 89, 195, 196, 168, 190, 
	190, 190, 1, 168, 194, 191, 191, 1, 
	194, 168, 191, 191, 191, 1, 168, 190, 
	190, 190, 1, 76, 80, 80, 80, 1, 
	76, 1, 76, 1, 76, 1, 197, 1, 
	164, 165, 103, 76, 163, 166, 166, 1, 
	198, 198, 198, 1, 199, 198, 198, 198, 
	1, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 1, 200, 200, 200, 103, 200, 
	200, 200, 200, 200, 200, 1, 37, 38, 
	39, 40, 201, 41, 202, 38, 38, 42, 
	38, 38, 38, 38, 201, 201, 201, 1, 
	6, 203, 8, 204, 10, 203, 11, 203, 
	203, 203, 203, 203, 1, 4, 205, 205, 
	1, 4, 206, 206, 1, 4, 207, 207, 
	1, 4, 208, 208, 1, 4, 209, 209, 
	1, 4, 210, 210, 1, 4, 211, 211, 
	1, 4, 212, 212, 1, 4, 213, 213, 
	1, 4, 214, 214, 1, 4, 215, 215, 
	1, 4, 216, 216, 1, 4, 217, 217, 
	1, 4, 218, 218, 1, 4, 219, 219, 
	1, 4, 220, 220, 1, 4, 221, 221, 
	1, 4, 222, 222, 1, 4, 1, 223, 
	223, 223, 223, 1, 224, 224, 224, 224, 
	223, 223, 223, 1, 226, 225, 227, 226, 
	225, 228, 229, 230, 231, 229, 229, 229, 
	229, 229, 229, 229, 1, 232, 1, 234, 
	233, 235, 234, 233, 228, 229, 230, 236, 
	229, 229, 229, 229, 229, 229, 229, 1, 
	237, 237, 237, 1, 229, 229, 229, 1, 
	228, 236, 238, 236, 236, 236, 236, 236, 
	236, 1, 239, 239, 239, 1, 236, 236, 
	236, 1, 228, 236, 238, 240, 236, 236, 
	236, 236, 236, 236, 1, 228, 241, 242, 
	236, 243, 241, 244, 245, 241, 241, 241, 
	241, 241, 1, 228, 241, 242, 236, 243, 
	241, 244, 241, 241, 241, 241, 241, 1, 
	246, 246, 246, 1, 241, 241, 241, 1, 
	228, 247, 248, 236, 247, 244, 247, 247, 
	247, 243, 247, 247, 247, 1, 247, 248, 
	247, 244, 247, 247, 247, 247, 247, 247, 
	1, 249, 249, 249, 1, 247, 247, 247, 
	1, 228, 250, 251, 236, 252, 250, 245, 
	250, 250, 250, 250, 250, 1, 228, 250, 
	251, 236, 252, 250, 250, 250, 250, 250, 
	250, 1, 253, 253, 253, 1, 250, 250, 
	250, 1, 228, 236, 252, 1, 254, 256, 
	257, 255, 255, 255, 1, 258, 258, 258, 
	1, 260, 259, 259, 259, 1, 260, 261, 
	261, 261, 1, 260, 262, 262, 262, 1, 
	260, 1, 264, 265, 263, 266, 266, 1, 
	267, 269, 268, 268, 268, 1, 271, 272, 
	270, 1, 273, 1, 275, 276, 274, 1, 
	277, 1, 279, 280, 278, 1, 281, 1, 
	228, 236, 252, 1, 281, 282, 1, 281, 
	278, 1, 283, 284, 281, 1, 278, 1, 
	278, 1, 277, 285, 1, 277, 274, 1, 
	277, 286, 287, 1, 274, 1, 274, 1, 
	273, 288, 1, 273, 270, 1, 273, 289, 
	290, 1, 270, 1, 270, 1, 269, 291, 
	291, 291, 1, 269, 292, 292, 292, 1, 
	269, 1, 293, 293, 293, 1, 281, 294, 
	294, 294, 1, 281, 295, 295, 295, 1, 
	281, 278, 278, 278, 1, 267, 269, 296, 
	268, 268, 1, 267, 269, 297, 291, 291, 
	1, 267, 269, 292, 292, 292, 1, 267, 
	298, 299, 269, 268, 268, 268, 1, 269, 
	297, 291, 291, 1, 297, 269, 291, 291, 
	291, 1, 269, 268, 268, 268, 1, 301, 
	300, 300, 300, 1, 301, 302, 302, 302, 
	1, 301, 303, 303, 303, 1, 301, 1, 
	305, 304, 304, 304, 1, 307, 306, 306, 
	306, 1, 307, 308, 308, 308, 1, 307, 
	309, 309, 309, 1, 307, 1, 311, 310, 
	310, 310, 1, 313, 312, 312, 312, 1, 
	313, 314, 314, 314, 1, 313, 315, 315, 
	315, 1, 313, 1, 317, 316, 316, 316, 
	1, 319, 318, 318, 318, 1, 319, 320, 
	320, 320, 1, 319, 321, 321, 321, 1, 
	319, 1, 323, 322, 322, 322, 1, 325, 
	324, 324, 324, 1, 325, 326, 326, 326, 
	1, 325, 327, 327, 327, 1, 325, 1, 
	329, 328, 328, 328, 1, 331, 330, 330, 
	330, 1, 331, 332, 332, 332, 1, 331, 
	333, 333, 333, 1, 331, 1, 335, 334, 
	334, 334, 1, 337, 336, 336, 336, 1, 
	337, 338, 338, 338, 1, 337, 339, 339, 
	339, 1, 337, 1, 340, 334, 334, 334, 
	1, 342, 343, 281, 254, 341, 344, 344, 
	1, 267, 346, 281, 345, 345, 345, 1, 
	346, 281, 347, 347, 347, 1, 346, 281, 
	348, 348, 348, 1, 346, 281, 1, 350, 
	351, 349, 352, 352, 1, 267, 269, 281, 
	353, 353, 353, 1, 269, 281, 354, 354, 
	354, 1, 269, 281, 355, 355, 355, 1, 
	269, 281, 1, 267, 269, 281, 356, 353, 
	353, 1, 267, 269, 281, 357, 354, 354, 
	1, 267, 269, 281, 355, 355, 355, 1, 
	267, 358, 359, 269, 281, 353, 353, 353, 
	1, 269, 281, 357, 354, 354, 1, 357, 
	269, 281, 354, 354, 354, 1, 269, 281, 
	353, 353, 353, 1, 267, 346, 281, 360, 
	345, 345, 1, 267, 346, 281, 361, 347, 
	347, 1, 267, 346, 281, 348, 348, 348, 
	1, 267, 362, 363, 346, 281, 345, 345, 
	345, 1, 346, 281, 361, 347, 347, 1, 
	361, 346, 281, 347, 347, 347, 1, 346, 
	281, 345, 345, 345, 1, 342, 343, 254, 
	341, 344, 344, 1, 365, 366, 254, 364, 
	367, 367, 1, 267, 346, 368, 368, 368, 
	1, 346, 369, 369, 369, 1, 346, 370, 
	370, 370, 1, 346, 1, 267, 346, 371, 
	368, 368, 1, 267, 346, 372, 369, 369, 
	1, 267, 346, 370, 370, 370, 1, 267, 
	373, 374, 346, 368, 368, 368, 1, 346, 
	372, 369, 369, 1, 372, 346, 369, 369, 
	369, 1, 346, 368, 368, 368, 1, 254, 
	258, 258, 258, 1, 254, 1, 254, 1, 
	254, 1, 375, 1, 342, 343, 281, 254, 
	341, 344, 344, 1, 376, 376, 376, 1, 
	377, 376, 376, 376, 1, 378, 378, 378, 
	378, 378, 378, 378, 378, 378, 1, 378, 
	378, 378, 281, 378, 378, 378, 378, 378, 
	378, 1, 26, 27, 26, 26, 26, 26, 
	26, 26, 26, 26, 26, 26, 1, 1, 
	0
];

enum short[] _http_parser_trans_targs = [
	2, 0, 194, 198, 3, 175, 4, 19, 
	20, 24, 33, 29, 173, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 17, 14, 
	348, 18, 14, 15, 16, 15, 13, 17, 
	16, 13, 17, 13, 348, 4, 19, 20, 
	24, 26, 29, 4, 21, 22, 4, 21, 
	22, 23, 25, 27, 28, 4, 30, 20, 
	31, 4, 30, 20, 31, 32, 34, 35, 
	36, 38, 42, 47, 37, 39, 40, 41, 
	43, 44, 46, 45, 48, 91, 167, 169, 
	49, 50, 53, 51, 52, 54, 84, 87, 
	90, 55, 77, 80, 56, 72, 74, 57, 
	58, 67, 69, 59, 60, 62, 64, 61, 
	63, 65, 66, 68, 70, 71, 73, 75, 
	76, 78, 79, 81, 82, 83, 85, 86, 
	88, 89, 92, 95, 93, 94, 96, 166, 
	97, 100, 98, 99, 101, 165, 102, 105, 
	103, 104, 106, 164, 107, 110, 108, 109, 
	111, 163, 112, 115, 113, 114, 116, 151, 
	117, 120, 118, 119, 121, 150, 122, 125, 
	123, 124, 126, 127, 143, 146, 149, 128, 
	131, 129, 130, 132, 136, 139, 142, 133, 
	134, 135, 137, 138, 140, 141, 144, 145, 
	147, 148, 152, 156, 159, 162, 153, 154, 
	155, 157, 158, 160, 161, 168, 170, 171, 
	172, 173, 174, 26, 27, 176, 177, 178, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	187, 188, 189, 190, 191, 192, 193, 195, 
	196, 196, 197, 349, 199, 202, 203, 208, 
	200, 200, 201, 349, 205, 204, 206, 207, 
	209, 210, 211, 213, 217, 222, 212, 214, 
	215, 216, 218, 219, 221, 220, 223, 266, 
	342, 344, 224, 225, 228, 226, 227, 229, 
	259, 262, 265, 230, 252, 255, 231, 247, 
	249, 232, 233, 242, 244, 234, 235, 237, 
	239, 236, 238, 240, 241, 243, 245, 246, 
	248, 250, 251, 253, 254, 256, 257, 258, 
	260, 261, 263, 264, 267, 270, 268, 269, 
	271, 341, 272, 275, 273, 274, 276, 340, 
	277, 280, 278, 279, 281, 339, 282, 285, 
	283, 284, 286, 338, 287, 290, 288, 289, 
	291, 326, 292, 295, 293, 294, 296, 325, 
	297, 300, 298, 299, 301, 302, 318, 321, 
	324, 303, 306, 304, 305, 307, 311, 314, 
	317, 308, 309, 310, 312, 313, 315, 316, 
	319, 320, 322, 323, 327, 331, 334, 337, 
	328, 329, 330, 332, 333, 335, 336, 343, 
	345, 346, 347
];

enum byte[] _http_parser_trans_actions = [
	1, 0, 1, 1, 15, 0, 47, 1, 
	47, 1, 1, 26, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 3, 
	29, 3, 0, 5, 9, 9, 32, 32, 
	0, 7, 7, 0, 21, 38, 0, 38, 
	0, 0, 19, 23, 1, 1, 13, 0, 
	0, 0, 0, 0, 0, 51, 11, 51, 
	11, 35, 0, 35, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 0, 0, 41, 19, 0, 0, 0, 
	1, 0, 0, 44, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

enum int http_parser_start = 1;
enum int http_parser_first_final = 348;
enum int http_parser_error = 0;

enum int http_parser_en_main = 1;


#line 111 "src/http/protocol/Request.d.rl"


class Request : Message
{
    enum Status
    {
        HasError = -1,
        NotFinished = 0,
        Finished = 1
    }

    this()
    {
        
#line 870 "src/http/protocol/Request.d"
	{
	cs = http_parser_start;
	}

#line 125 "src/http/protocol/Request.d.rl"
    }

    size_t feed(char[] data)
    {
        mixin(Tracer);
        if(!data.length)
        {
            return 0;
        }
            
        off = raw.length;
        raw ~= data;
        char * buffer = cast(char*)raw.ptr;

        char * p = buffer + off;
        char * pe = p + data.length;

        
#line 894 "src/http/protocol/Request.d"
	{
	int _klen;
	uint _trans;
	const(byte)* _acts;
	uint _nacts;
	const(char)* _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = &_http_parser_trans_keys[_http_parser_key_offsets[cs]];
	_trans = _http_parser_index_offsets[cs];

	_klen = _http_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		const(char)* _lower = _keys;
		const(char)* _mid;
		const(char)* _upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += cast(uint)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _http_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		const(char)* _lower = _keys;
		const(char)* _mid;
		const(char)* _upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += cast(uint)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _http_parser_indicies[_trans];
	cs = _http_parser_trans_targs[_trans];

	if ( _http_parser_trans_actions[_trans] == 0 )
		goto _again;

	_acts = &_http_parser_actions[_http_parser_trans_actions[_trans]];
	_nacts = cast(uint) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 16 "src/http/protocol/Request.d.rl"
	{{
        mark = p - buffer;
    }}
	break;
	case 1:
#line 20 "src/http/protocol/Request.d.rl"
	{{
        field_start = p - buffer;
    }}
	break;
	case 2:
#line 24 "src/http/protocol/Request.d.rl"
	{{
        field_len = p - buffer - field_start;
    }}
	break;
	case 3:
#line 28 "src/http/protocol/Request.d.rl"
	{{
        string field = raw[field_start..field_start+field_len];
        
        size_t endValue = p - buffer - mark;
        string value = raw[mark..mark+endValue];
        
        headers[field] = value;
        
        log.trace("Adding header : ", field, " : " , value);
    }}
	break;
	case 4:
#line 39 "src/http/protocol/Request.d.rl"
	{{
        mark = p - buffer;
    }}
	break;
	case 5:
#line 43 "src/http/protocol/Request.d.rl"
	{{ 
        query_start = p - buffer;
    }}
	break;
	case 6:
#line 47 "src/http/protocol/Request.d.rl"
	{{ 
        size_t end = p - buffer - query_start;
        query = raw[query_start..query_start+end];
        log.trace("Query : ", query);
    }}
	break;
	case 7:
#line 53 "src/http/protocol/Request.d.rl"
	{{
        size_t end = p - buffer - mark;
        fragment = raw[mark..mark+end];
        log.trace("Fragment : ", fragment);
    }}
	break;
	case 8:
#line 59 "src/http/protocol/Request.d.rl"
	{{
        size_t end = p - buffer - mark;
        setMethod(raw[mark..mark+end]);
        log.trace("Method : ", getMethod());
    }}
	break;
	case 9:
#line 65 "src/http/protocol/Request.d.rl"
	{{
        size_t end = p - buffer - mark;
        uri = raw[mark..mark+end];
        log.trace("URI : ", uri);
    }}
	break;
	case 10:
#line 71 "src/http/protocol/Request.d.rl"
	{{
        size_t end = p - buffer - mark;
        setProtocol(raw[mark..mark+end]);
        log.trace("Protocole : ", getProtocol());
    }}
	break;
	case 11:
#line 77 "src/http/protocol/Request.d.rl"
	{{
        size_t end = p - buffer - mark;
        path = raw[mark..mark+end];
        log.trace("Path : ", path);
    }}
	break;
	case 12:
#line 83 "src/http/protocol/Request.d.rl"
	{{
        xml_sent = true;
    }}
	break;
	case 13:
#line 87 "src/http/protocol/Request.d.rl"
	{{
        json_sent = true;
    }}
	break;
	case 14:
#line 91 "src/http/protocol/Request.d.rl"
	{{
        body_start = p - buffer;
        if(xml_sent || json_sent)
        {
            /*
            content_len = fpc - buffer - body_start + 1;
            */
            content = raw;
        }
        else
        {
            content = raw[body_start .. body_start + pe - p - 1];
        }
        log.trace("Done, content : ", content, ", content.length : ", content.length);
        {p++; if (true) goto _out; }
    }}
	break;
#line 1090 "src/http/protocol/Request.d"
		default: break;
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

#line 143 "src/http/protocol/Request.d.rl"

        nread += p - (buffer + off);
        return nread;
    }

    auto getStatus()
    {
        if (hasError())
        {
            //log.test("Has error");
            return Status.HasError;
        }
        else if (isFinished())
        {
            //log.test("Is finished");
            return Status.Finished;
        } 
        else 
        {
            //log.test("Is not finished");
            return Status.NotFinished;
        }
    }

    auto hasError()
    {
        return cs == 
#line 1132 "src/http/protocol/Request.d"
0
#line 169 "src/http/protocol/Request.d.rl"
;
    }

    auto isFinished()
    {
        return cs >= 
#line 1141 "src/http/protocol/Request.d"
348
#line 174 "src/http/protocol/Request.d.rl"
;
    }

    void setMethod(string method)
    {
        this.method = cast(Method)method;
    }

    auto getMethod()
    {
        return method;
    }

    auto getPath()
    {
        return path;
    }

    auto getUri()
    {
        return uri;
    }
    
    private:
        // parsed request
        string query;
        string fragment;
        string uri;
        string path;
        Method method;

        // parser data
        int cs;
        size_t nread;
        size_t off;
        long mark;
        long field_start;
        long field_len;
        long query_start;
        long body_start;
        long content_len;
        bool xml_sent;
        bool json_sent;
        string raw;
}

unittest
{
    Request request = new Request();
    assert(request.getStatus() == Request.Status.NotFinished, "Should NOT be finished if nothing parsed.");
    assert(!request.hasError(), "Should not have an error at the beginning.");
    assert(!request.isFinished(), "Should not be finished since never handed anything.");
}
